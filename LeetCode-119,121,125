class Solution{
/*
119.杨辉三角II
给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。
*/
  public List<Integer> getRow(int rowIndex) {
    List<List<Integer>> ans = new ArrayList<>();
    for(int i = 0; i < rowIndex; i++) {
      List<Integer> list = new ArrayList<>();
      for(int j = 0; j < i; j++) {
        if(j == 0 || j == i) {
          list.add(1);
        } else {
          list.add(list.get(i - 1).get(j - 1) + list.get(i - 1).get(j));
        }
      }
      ans.add(list);
    }
    return ans.get(rowIndex);
  }
/*
121.买股票的最佳时机
给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
*/
  public int maxProfit(int[] prices) {
    int max = 0;
    int min = Integer.MAX_VALUE;
    for(int i = 0; i < prices.length; i++) {
      if(prices[i] < min) {
        min = prices[i];
      } else if(prices[i] - min > max) {
        max = prices[i] - min;
      }
    }
    return max;
  }
/*
125.验证回文串
如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 回文串 。
字母和数字都属于字母数字字符。
给你一个字符串 s，如果它是 回文串 ，返回 true ；否则，返回 false 。
*/
  public boolean isPalindrome(String s) {
    int left = 0;
    int n = s.length();
    int right = n - 1;
    while(left < right) {
      while(left < right && !Character.isLetterOrDigit(s.charAt(left))) {
        left++;
      }
      while(left < right && !Character.isLetterOrDigit(s.charAt(right))) {
        right--;
      }
      if(left < right) {
        if(Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
          return false;
        }
        left++;
        right--;
      }
    }
    return true;
  }
}
